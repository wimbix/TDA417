Task 1: figuring out the complexity
-----------------------------------

Insertion.java on:
  random inputs: Quadratic
  95% sorted inputs: Quadratic
  sorted inputs: Linear

Quick.java on:
  random inputs: Linearithmic
  95% sorted inputs: Linearithmic
  sorted inputs: Quadratic

Merge.java on:
  random inputs: Linearithmic
  95% sorted inputs: Linearithmic
  sorted inputs: Linearithmic

Arrays.sort on:
  random inputs: n lg n
  95% sorted inputs: Linearithmic
  sorted inputs: Linearithmic

Task 2: improving quicksort
---------------------------

Do the following changes affect the complexity of quicksort on any kind of
input data? If so, what is it that changes?

  Shuffling the array first: [no] [yes+reason]
  - Yes, every input will be linearithmic because all inputs will be shuffled and therefore random

  Median-of-three pivot selection: [no] [yes+reason]
  - Yes, sorted is now linearithmic

  Insertion sort for small arrays: [no] [yes+reason]
  - No difference in complexity but it makes it faster
  
Which combination of improvements gives the best result?
If you use insertion sort for small arrays, say what cutoff you used.

[...answer here...]

Median-of-three and Insertion sort for small arrays together makes the best results, cutoff size 100
